name: Publish Docker latest and version tagged image
# This should only run when a release is created with a version tag
on:
    workflow_dispatch:

jobs:
    semantic-release:
        if: github.ref_name == github.event.repository.default_branch
        name: Semantic Release Process
        runs-on: self-hosted
        permissions:
            contents: write # to be able to publish a GitHub release
            issues: write # to be able to comment on released issues
            pull-requests: write # to be able to comment on released pull requests
        steps:
            -   name: Checkout source code
                uses: actions/checkout@v4
                with:
                    token: ${{ secrets.GH_TOKEN }}
                    fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
            # This is required to be able to run semantic-release
            -   name: Setup Node.js
                uses: actions/setup-node@v4
                with:
                    node-version: 21
            # This is required to be able to run semantic-release plugins
            -   name: Client App Install
                uses: ./.github/workflows/steps/client-app-install/
            -   name: GitHub Release
                id: get-next-version
                run: npx --prefix src/WebAPI/ClientApp/ semantic-release
                env:
                    GH_TOKEN: ${{ secrets.GH_TOKEN }}
                    GIT_AUTHOR_NAME: ${{ vars.GIT_AUTHOR_NAME }}
                    GIT_AUTHOR_EMAIL: ${{ vars.GIT_AUTHOR_EMAIL }}
                    GIT_COMMITTER_NAME: ${{ vars.GIT_COMMITTER_NAME }}
                    GIT_COMMITTER_EMAIL: ${{ vars.GIT_COMMITTER_EMAIL }}
        outputs:
            new-release-published: ${{ steps.get-next-version.outputs.new-release-published }}
            new-release-version: ${{ steps.get-next-version.outputs.new-release-version }}

    # Build Docker Image
    build-and-publish:
        if: needs.semantic-release.outputs.new-release-published == 'true'
        needs: [ semantic-release ]
        runs-on: self-hosted
        name: Build and Publish On Latest / Tagged Docker Image
        steps:
            -   name: Checkout source code
                uses: actions/checkout@v4
                with:
                    token: ${{ secrets.GH_TOKEN }}
                    fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags

            -   name: Get latest version tag
                id: version
                uses: WyriHaximus/github-action-get-previous-tag@v1

            -   name: Echo last version tag
                run: echo ${{ steps.version.outputs.tag }}

            -   name: Strip 'v' from version
                id: strip_v
                run: |
                    # Strip the 'v' prefix from the version tag
                    VERSION_NO_V="${{ steps.version.outputs.tag }}"
                    VERSION_NO_V="${VERSION_NO_V#v}"
                    echo "VERSION_NO_V=$VERSION_NO_V" >> $GITHUB_ENV

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3

            -   name: Login to Docker Hub
                uses: docker/login-action@v3
                with:
                    username: ${{ secrets.DOCKER_USERNAME }}
                    password: ${{ secrets.DOCKER_PASSWORD }}

            -   name: Build and push
                uses: docker/build-push-action@v6
                env:
                    VERSION: ${{ env.VERSION_NO_V }}
                with:
                    platforms: linux/amd64,linux/arm64
                    push: true
                    tags: frosit/plexripper:latest,frosit/plexripper:${{ env.VERSION_NO_V }}
                    build-args: VERSION
                    file: docker/Dockerfile
